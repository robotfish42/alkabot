#include <Arduino.h>
#include "BasicStepperDriver.h"
#include "MultiDriver.h"
#include "SyncDriver.h"

//set stepper motor constants
#define MOTOR_STEPS 200
#define TANK_RPM 180
#define WASTE_RPM 180
#define REAGENT_RPM 80
#define MICROSTEPS 8

//set stepper motor wiring
#define DIR_TANK 5
#define STEP_TANK 2
#define DIR_REAGENT 7
#define STEP_REAGENT 4
#define DIR_WASTE 6
#define STEP_WASTE 3
#define SLEEP 8

//set DC motor wiring
#define STIR_EN A2
#define STIR_PWM A3

//set up steppers
BasicStepperDriver tank(MOTOR_STEPS, DIR_TANK, STEP_TANK, SLEEP);
BasicStepperDriver reagent(MOTOR_STEPS, DIR_REAGENT, STEP_REAGENT);
BasicStepperDriver waste(MOTOR_STEPS, DIR_WASTE, STEP_WASTE);

SyncDriver controller(reagent,tank,waste);

int reagent_dir = 1;
int waste_dir = 1;
int tank_dir = 1;

bool primed = false;
bool lineEmpty = false;

void dir_reagent() {
  Serial.println("Running reagent pump for 3 rotations. Pump should run TOWARDS reaction chamber.");
  tank.enable();
  reagent.rotate(reagent_dir*360*3);
  Serial.println("Enter R to reverse reagent pump direction or any other letter to keep it as is.");
  while(!Serial.available()){
    delay(10);
  }
  char inchar = char(Serial.read());
  if (inchar == 'R' || inchar == 'r'){
    Serial.println("Okay, switching pump direction. You'll need to change REAGENT_DIRECTION to -1 in the main code.");
    reagent_dir = -1;
  } else {
    Serial.println("Okay, pump direction confirmed. Keep REAGENT_DIRECTION as 1 in the main code.");
  }
  Serial.println(" ");
  while(Serial.available()){
    Serial.read();
  }
}

void dir_tank() {
  Serial.println("Running tank pump for 3 rotations. Pump should run TOWARDS reaction chamber.");
  tank.rotate(tank_dir*360*3);
  Serial.println("Enter R to reverse reagent pump direction or any other letter to keep it as is.");
  while(!Serial.available()){
    delay(10);
  }
  char inchar = char(Serial.read());
  if (inchar == 'R' || inchar == 'r'){
    Serial.println("Okay, switching pump direction. You'll need to change TANK_DIRECTION to -1 in the main code.");
    tank_dir = -1;
  } else {
    Serial.println("Okay, pump direction confirmed. Keep TANK_DIRECTION as 1 in the main code.");
  }
  Serial.println(" ");
  while(Serial.available()){
    Serial.read();
  }
}

void dir_waste() {
  Serial.println("Running waste pump for 3 rotations. Pump should run AWAY FROM reaction chamber.");
  waste.rotate(waste_dir*360*3);
  Serial.println("Enter R to reverse reagent pump direction or any other letter to keep it as is.");
  while(!Serial.available()){
    delay(10);
  }
  char inchar = char(Serial.read());
  if (inchar == 'R' || inchar == 'r'){
    Serial.println("Okay, switching pump direction. You'll need to change WASTE_DIRECTION to -1 in the main code.");
    waste_dir = -1;
  } else {
    Serial.println("Okay, pump direction confirmed. Keep WASTE_DIRECTION as 1 in the main code.");
  }
  Serial.println(" ");
  while(Serial.available()){
    Serial.read();
  }
}

void prime(){

  int chamberRotations = 0;

  Serial.println("Place tank and reagent tubing in water and waste tubing in an empty receptacle, and enter any letter to prime for 20 rotations.");
  while(!Serial.available()){
    delay(10);
  }
  controller.rotate(reagent_dir*360*20,tank_dir*360*20,0);
  chamberRotations += 20;

  while(Serial.available()){
    Serial.read();
  }
  
  while(primed == false){
    Serial.println(" ");
    Serial.println("Are lines fully primed? If not, enter P to prime for another 20 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'P' || inchar == 'p'){
      Serial.println("Okay, priming for another 20 rotations.");
      controller.rotate(reagent_dir*360*20,tank_dir*360*20,0);
      chamberRotations += 20;
    } else {
      Serial.println("Okay, emptying reaction chamber.");
      waste.rotate(waste_dir*360*chamberRotations*2);
      primed = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
}

void cal_reagent(){
  Serial.println(" ");
  Serial.println("We'll calibrate the reagent speed first. Place the reagent tubing in water and the waste tubing in a 10ml graduated cylinder, and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println("The reagent pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(reagent_dir*360*200,0,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
  
  Serial.println("Divide 200 by the measured volume and note down this number. Sense check: this should be between 20 and 30.");


  while(Serial.available()){
    Serial.read();
  }

  Serial.println(" ");
  Serial.println("Second run. Empty and dry the graduated cylinder, and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }

  Serial.println("The reagent pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(reagent_dir*360*200,0,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }

  Serial.println("Divide 200 by the measured volume and note down this number.");


  while(Serial.available()){
    Serial.read();
  }

  Serial.println(" ");
  Serial.println("Final run. Empty and dry the graduated cylinder, and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println("The reagent pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(reagent_dir*360*200,0,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
  Serial.println("Divide 200 by the measured volume. Average this with the previous two results, and enter this as REAGENT_ROT_ML in the main code.");


  while(Serial.available()){
    Serial.read();
  }
}

void cal_tank(){
  Serial.println(" ");
  Serial.println("Place the tank tubing in water and the waste tubing in a 50ml graduated cylinder and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println("The tank pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(0,tank_dir*360*200,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
  Serial.println("Divide 200 by the measured volume and note down this number. Sense check: this should be between 1 and 5.");


  while(Serial.available()){
    Serial.read();
  }

    Serial.println(" ");
  Serial.println("Second run. Empty and dry the graduated cylinder, and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println("The tank pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(0,tank_dir*360*200,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
  Serial.println("Divide 200 by the measured volume and note down this number.");

  
  while(Serial.available()){
    Serial.read();
  }

    Serial.println(" ");
  Serial.println("Final run. Empty and dry the graduated cylinder, and enter any letter when ready.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println("The tank pump will run for 200 rotations. The waste pump will also run to push the reagent into the cylinder.");
  controller.rotate(0,tank_dir*360*200,waste_dir*360*200);
  waste.rotate(waste_dir*360*100);
  lineEmpty = false;
  while(Serial.available()){
    Serial.read();
  }

  while (lineEmpty == false){
    Serial.println("Is the waste tube empty of water? If not, enter W to run the waste pump for 80 rotations. Otherwise, enter any other letter to continue.");
    while(!Serial.available()){
      delay(10);
    }
    char inchar = char(Serial.read());
    if (inchar == 'W' || inchar == 'w'){
      Serial.println("Okay, running waste pump for another 80 rotations.");
      waste.rotate(waste_dir*360*80);
    } else {
      Serial.println("Okay, continuing to next step.");
      lineEmpty = true;
    }
    while(Serial.available()){
      Serial.read();
    }
  }
  Serial.println("Divide 200 by the measured volume. Average this with the previous two results, and enter this as TANK_ROT_ML in the main code.");


  while(Serial.available()){
    Serial.read();
  }
}

void stirrer_speed(){
  bool speedFound = false;
  bool startFound = false;
  int stirSpeed;
  Serial.println(" ");
  Serial.println("Enter any letter to continue.");
  while(!Serial.available()){
    delay(10);
  }
  Serial.println(" ");
  Serial.println("Enter any integer from 1 to 255 to set the stirrer motor speed. START SLOW. You're looking for the lowest setting that will reliably move the stirrer magnet. It's probably less than 50!");
  while(!Serial.available()){
    delay(10);
  }
  stirSpeed = Serial.parseInt();
  while(Serial.available()){
    Serial.read();
  }
  digitalWrite(STIR_EN,HIGH);
  analogWrite(STIR_PWM,stirSpeed);
  Serial.println("Enter any new integeter from 1 to 255 to change the speed. When you're happy with the speed you've got and you want to move on to the next step, enter 0.");
  while (speedFound == false){
    while(!Serial.available()){
      delay(10);
    }
    stirSpeed = Serial.parseInt();
      while(Serial.available()){
        Serial.read();
      }
    if (stirSpeed == 0){
      speedFound = true;
    } else{
      analogWrite(STIR_PWM,stirSpeed);
    }
  }
  Serial.println("Okay, enter that number as STIR_END in the main code.");
  Serial.println(" ");
  Serial.println("Next we're going to find the low point on the motor output. Enter any integer from 1 to 255. Start VERY low. You're looking for the highest setting that will reliably NOT move the motor.");
  while(!Serial.available()){
    delay(10);
  }
  stirSpeed = Serial.parseInt();
  while(Serial.available()){
    Serial.read();
  }
  analogWrite(STIR_PWM,stirSpeed);
  Serial.println("Enter any new integeter from 1 to 255 to change the setting. When you're happy with what you've got, enter 0.");
  while (startFound == false){
    while(!Serial.available()){
      delay(10);
    }
    stirSpeed = Serial.parseInt();
      while(Serial.available()){
        Serial.read();
      }
    if (stirSpeed == 0){
      startFound = true;
    } else{
      analogWrite(STIR_PWM,stirSpeed);
    }
  }
  Serial.println("Okay, enter that number as STIR_START in the main code. Sense check: it should be less that STIR_END.");
}

void setup() {

  tank.begin(TANK_RPM,MICROSTEPS);
  reagent.begin(REAGENT_RPM,MICROSTEPS);
  waste.begin(WASTE_RPM,MICROSTEPS);

  tank.setEnableActiveState(LOW);
  
  // disable the pH probe
  pinMode(10,OUTPUT);
  digitalWrite(10,LOW);

  tank.setEnableActiveState(LOW);
  
  Serial.begin(9600);
  delay(2000);
  Serial.println("Peristaltic pump calibration tool. SET ARDUINO SERIAL MONITOR TO CARRIAGE RETURN ONLY.");
  Serial.println(" ");
  Serial.println("Step 1: Direction. Enter any letter to begin.");
  while(!Serial.available()){
    delay(10);
  }
  while(Serial.available()){
    Serial.read();
  }

  dir_reagent();
  dir_tank();
  dir_waste();

  Serial.println("Step 2: Priming. Enter any letter to begin.");
  while(!Serial.available()){
    delay(10);
  }
  while(Serial.available()){
    Serial.read();
  }
  prime();
  
  
  Serial.println(" ");
  Serial.println("Step 3: Calibration. This will run three times for each pump. Enter any letter to begin.");
  while(!Serial.available()){
    delay(10);
  }
  while(Serial.available()){
    Serial.read();
  }

  cal_reagent();

  Serial.println(" ");
  Serial.println("Next up: tank pump speed. Enter any letter to proceed.");
  while(!Serial.available()){
    delay(10);
  }
  while(Serial.available()){
    Serial.read();
  }
  
  cal_tank();

  Serial.println(" ");
  Serial.println("The waste pump does not need to be speed calibrated, as its value should be the same as the tank pump. That means we're on to the last step!");

  Serial.println(" ");
  Serial.println("Step 4: Stirrer motor speed. Enter any letter to begin.");

  while(!Serial.available()){
    delay(10);
  }
  while(Serial.available()){
    Serial.read();
  }

  stirrer_speed();
  
  tank.disable();
  digitalWrite(STIR_EN,LOW);
  
  Serial.println(" ");
  Serial.println("That's it! You've got all your calibration values. You wrote them down, right? Enter them in the appropriate constants and upload the KH_monitor code!");

}

void loop() {

}
